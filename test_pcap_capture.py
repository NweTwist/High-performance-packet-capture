#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ high_performance_capture.py —Å pcap —Ñ–∞–π–ª–∞–º–∏
"""

import sys
import time
import argparse
from pathlib import Path
from typing import Dict, Any

try:
    import scapy.all as scapy
    from scapy.utils import rdpcap
except ImportError:
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ scapy: pip install scapy")
    sys.exit(1)

# –ò–º–ø–æ—Ä—Ç –Ω–∞—à–µ–≥–æ –º–æ–¥—É–ª—è
from high_performance_capture import (
    HighPerformanceCapture, 
    PacketMetadata, 
    CaptureStats
)

class PcapTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—Ö–≤–∞—Ç–∞ —Å pcap —Ñ–∞–π–ª–∞–º–∏"""
    
    def __init__(self, pcap_file: str):
        self.pcap_file = Path(pcap_file)
        self.packets = []
        self.processed_packets = []
        self.anomalies = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
        if not self.pcap_file.exists():
            raise FileNotFoundError(f"Pcap —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {pcap_file}")
    
    def load_pcap(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞–∫–µ—Ç–æ–≤ –∏–∑ pcap —Ñ–∞–π–ª–∞"""
        print(f"–ó–∞–≥—Ä—É–∑–∫–∞ pcap —Ñ–∞–π–ª–∞: {self.pcap_file}")
        try:
            self.packets = rdpcap(str(self.pcap_file))
            print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.packets)} –ø–∞–∫–µ—Ç–æ–≤")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ pcap: {e}")
            raise
    
    def packet_callback(self, metadata: PacketMetadata, packet_data: bytes):
        """–ö–æ–ª–±—ç–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–∫–µ—Ç–æ–≤"""
        self.processed_packets.append({
            'metadata': metadata,
            'size': len(packet_data),
            'timestamp': metadata.timestamp
        })
        
        # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞–∫–µ—Ç–µ
        protocol_name = {
            1: 'ICMP',
            6: 'TCP', 
            17: 'UDP'
        }.get(metadata.protocol, f'Protocol-{metadata.protocol}')
        
        print(f"[{len(self.processed_packets):4d}] "
              f"{metadata.src_ip}:{metadata.src_port} -> "
              f"{metadata.dst_ip}:{metadata.dst_port} "
              f"({protocol_name}, {metadata.size} bytes)")
    
    def anomaly_callback(self, anomaly_data: Dict[str, Any]):
        """–ö–æ–ª–±—ç–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–Ω–æ–º–∞–ª–∏–π"""
        self.anomalies.append(anomaly_data)
        print(f"üö® –ê–ù–û–ú–ê–õ–ò–Ø: {anomaly_data}")
    
    def simulate_capture(self, delay: float = 0.001):
        """–°–∏–º—É–ª—è—Ü–∏—è –∑–∞—Ö–≤–∞—Ç–∞ –ø–∞–∫–µ—Ç–æ–≤ –∏–∑ pcap —Ñ–∞–π–ª–∞"""
        print(f"\n–ù–∞—á–∞–ª–æ —Å–∏–º—É–ª—è—Ü–∏–∏ –∑–∞—Ö–≤–∞—Ç–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π {delay}s –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏...")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∑–∞—Ö–≤–∞—Ç–∞
        capture = HighPerformanceCapture()
        capture.add_packet_callback(self.packet_callback)
        capture.add_anomaly_callback(self.anomaly_callback)
        
        # –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –∑–∞—Ö–≤–∞—Ç–∞
        capture.start_capture()
        
        try:
            start_time = time.time()
            
            # –ü–æ–¥–∞—á–∞ –ø–∞–∫–µ—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º—É
            for i, packet in enumerate(self.packets):
                packet_data = bytes(packet)
                
                # –ó–∞–ø–∏—Å—å –ø–∞–∫–µ—Ç–∞ –≤ –∫–æ–ª—å—Ü–µ–≤–æ–π –±—É—Ñ–µ—Ä
                success = capture.ring_buffer.write_packet(packet_data)
                if success:
                    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    try:
                        capture.processing_queue.put_nowait(packet_data)
                        capture.stats.packets_captured += 1
                        capture.stats.bytes_captured += len(packet_data)
                    except:
                        capture.stats.packets_dropped += 1
                else:
                    capture.stats.packets_dropped += 1
                    print(f"‚ö†Ô∏è  –ü–∞–∫–µ—Ç {i+1} –æ—Ç–±—Ä–æ—à–µ–Ω (–±—É—Ñ–µ—Ä –ø–æ–ª–æ–Ω)")
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏
                if delay > 0:
                    time.sleep(delay)
                
                # –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 100 –ø–∞–∫–µ—Ç–æ–≤
                if (i + 1) % 100 == 0:
                    print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i+1}/{len(self.packets)} –ø–∞–∫–µ—Ç–æ–≤...")
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            print("\n–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
            time.sleep(2)
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏
            while not capture.processing_queue.empty():
                time.sleep(0.1)
            
            processing_time = time.time() - start_time
            
            # –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            self.print_statistics(capture, processing_time)
            
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è  –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        finally:
            capture.stop_capture()
    
    def print_statistics(self, capture: HighPerformanceCapture, processing_time: float):
        """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        stats = capture.get_stats()
        
        print("\n" + "="*60)
        print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("="*60)
        
        print(f"üìÅ Pcap —Ñ–∞–π–ª: {self.pcap_file.name}")
        print(f"üì¶ –ü–∞–∫–µ—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ: {len(self.packets)}")
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"üöÄ –°–∫–æ—Ä–æ—Å—Ç—å: {len(self.packets)/processing_time:.1f} –ø–∞–∫–µ—Ç–æ–≤/—Å–µ–∫")
        
        print("\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞:")
        print(f"  ‚úÖ –ó–∞—Ö–≤–∞—á–µ–Ω–æ: {stats.packets_captured}")
        print(f"  ‚öôÔ∏è  –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(self.processed_packets)}")
        print(f"  ‚ùå –ü–æ—Ç–µ—Ä—è–Ω–æ: {stats.packets_dropped}")
        print(f"  üìä –ë–∞–π—Ç –∑–∞—Ö–≤–∞—á–µ–Ω–æ: {stats.bytes_captured:,}")
        print(f"  üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –±—É—Ñ–µ—Ä–∞: {capture.get_buffer_utilization():.1f}%")
        
        if self.anomalies:
            print(f"\nüö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∞–Ω–æ–º–∞–ª–∏–π: {len(self.anomalies)}")
            for i, anomaly in enumerate(self.anomalies[:5]):  # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ 5
                print(f"  {i+1}. {anomaly}")
            if len(self.anomalies) > 5:
                print(f"  ... –∏ –µ—â—ë {len(self.anomalies) - 5}")
        
        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤
        protocols = {}
        for pkt_info in self.processed_packets:
            proto = pkt_info['metadata'].protocol
            protocols[proto] = protocols.get(proto, 0) + 1
        
        if protocols:
            print("\nüåê –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞–º:")
            protocol_names = {1: 'ICMP', 6: 'TCP', 17: 'UDP'}
            for proto, count in sorted(protocols.items()):
                name = protocol_names.get(proto, f'Protocol-{proto}')
                percentage = (count / len(self.processed_packets)) * 100
                print(f"  {name}: {count} ({percentage:.1f}%)")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
        success_rate = (len(self.processed_packets) / len(self.packets)) * 100
        print(f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏: {success_rate:.1f}%")
        
        if success_rate < 95:
            print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ù–∏–∑–∫–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏!")
        elif success_rate == 100:
            print("üéâ –û–¢–õ–ò–ß–ù–û: –í—Å–µ –ø–∞–∫–µ—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")

def main():
    parser = argparse.ArgumentParser(
        description="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ high_performance_capture.py —Å pcap —Ñ–∞–π–ª–∞–º–∏"
    )
    parser.add_argument(
        "pcap_file", 
        help="–ü—É—Ç—å –∫ pcap —Ñ–∞–π–ª—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
    )
    parser.add_argument(
        "--delay", 
        type=float, 
        default=0.001,
        help="–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 0.001)"
    )
    parser.add_argument(
        "--fast", 
        action="store_true",
        help="–ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º –±–µ–∑ –∑–∞–¥–µ—Ä–∂–µ–∫"
    )
    
    args = parser.parse_args()
    
    if args.fast:
        args.delay = 0
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–µ—Ä–∞
        tester = PcapTester(args.pcap_file)
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ pcap —Ñ–∞–π–ª–∞
        tester.load_pcap()
        
        # –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏
        tester.simulate_capture(delay=args.delay)
        
    except FileNotFoundError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)
    except KeyboardInterrupt:
        print("\nüëã –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()