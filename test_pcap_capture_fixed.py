#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ high_performance_capture.py —Å pcap —Ñ–∞–π–ª–∞–º–∏
–°–æ–≤–º–µ—Å—Ç–∏–º —Å Windows –∏ Linux
"""

import sys
import time
import argparse
import threading
from pathlib import Path
from typing import Dict, Any

try:
    import scapy.all as scapy
    from scapy.utils import rdpcap
except ImportError:
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ scapy: pip install scapy")
    sys.exit(1)

# –ò–º–ø–æ—Ä—Ç –Ω–∞—à–µ–≥–æ –º–æ–¥—É–ª—è
from high_performance_capture import (
    HighPerformanceCapture, 
    PacketMetadata, 
    CaptureStats
)

class FixedPcapTester:
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—Ö–≤–∞—Ç–∞ —Å pcap —Ñ–∞–π–ª–∞–º–∏"""
    
    def __init__(self, pcap_file: str):
        self.pcap_file = Path(pcap_file)
        self.packets = []
        self.processed_packets = []
        self.anomalies = []
        self.packets_sent = 0
        self.packets_failed = 0
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
        if not self.pcap_file.exists():
            raise FileNotFoundError(f"Pcap —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {pcap_file}")
    
    def load_pcap(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞–∫–µ—Ç–æ–≤ –∏–∑ pcap —Ñ–∞–π–ª–∞"""
        print(f"–ó–∞–≥—Ä—É–∑–∫–∞ pcap —Ñ–∞–π–ª–∞: {self.pcap_file}")
        try:
            self.packets = rdpcap(str(self.pcap_file))
            print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.packets)} –ø–∞–∫–µ—Ç–æ–≤")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ pcap: {e}")
            raise
    
    def packet_callback(self, metadata: PacketMetadata, packet_data: bytes):
        """–ö–æ–ª–±—ç–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–∫–µ—Ç–æ–≤"""
        self.processed_packets.append({
            'metadata': metadata,
            'size': len(packet_data),
            'timestamp': metadata.timestamp
        })
        
        # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞–∫–µ—Ç–µ (–∫–∞–∂–¥—ã–π 50-–π –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Å–ø–∞–º–∞)
        if len(self.processed_packets) % 50 == 0 or len(self.processed_packets) <= 10:
            protocol_name = {
                1: 'ICMP',
                6: 'TCP', 
                17: 'UDP'
            }.get(metadata.protocol, f'Protocol-{metadata.protocol}')
            
            print(f"[{len(self.processed_packets):4d}] "
                  f"{metadata.src_ip}:{metadata.src_port} -> "
                  f"{metadata.dst_ip}:{metadata.dst_port} "
                  f"({protocol_name}, {metadata.size} bytes)")
    
    def anomaly_callback(self, anomaly_data: Dict[str, Any]):
        """–ö–æ–ª–±—ç–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–Ω–æ–º–∞–ª–∏–π"""
        self.anomalies.append(anomaly_data)
        print(f"üö® –ê–ù–û–ú–ê–õ–ò–Ø: {anomaly_data}")
    
    def simulate_capture_direct(self, delay: float = 0.001):
        """–ü—Ä—è–º–∞—è —Å–∏–º—É–ª—è—Ü–∏—è –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ç–µ–≤–æ–≥–æ –∑–∞—Ö–≤–∞—Ç–∞"""
        print(f"\n–ù–∞—á–∞–ª–æ –ø—Ä—è–º–æ–π —Å–∏–º—É–ª—è—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–∫–µ—Ç–æ–≤...")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –ø–∞–∫–µ—Ç–æ–≤ –Ω–∞–ø—Ä—è–º—É—é
        from high_performance_capture import PacketProcessor
        processor = PacketProcessor()
        
        start_time = time.time()
        processed_count = 0
        failed_count = 0
        
        try:
            for i, packet in enumerate(self.packets):
                packet_data = bytes(packet)
                
                # –ü—Ä—è–º–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–∫–µ—Ç–∞
                metadata = processor.process_packet(packet_data)
                if metadata:
                    self.packet_callback(metadata, packet_data)
                    processed_count += 1
                else:
                    failed_count += 1
                    print(f"‚ö†Ô∏è  –ü–∞–∫–µ—Ç {i+1} –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å")
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏
                if delay > 0:
                    time.sleep(delay)
                
                # –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 100 –ø–∞–∫–µ—Ç–æ–≤
                if (i + 1) % 100 == 0:
                    print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i+1}/{len(self.packets)} –ø–∞–∫–µ—Ç–æ–≤...")
            
            processing_time = time.time() - start_time
            
            # –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            self.print_direct_statistics(processed_count, failed_count, processing_time)
            
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è  –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    
    def simulate_capture_buffered(self, delay: float = 0.001):
        """–°–∏–º—É–ª—è—Ü–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±—É—Ñ–µ—Ä–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è)"""
        print(f"\n–ù–∞—á–∞–ª–æ –±—É—Ñ–µ—Ä–Ω–æ–π —Å–∏–º—É–ª—è—Ü–∏–∏ –∑–∞—Ö–≤–∞—Ç–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π {delay}s –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏...")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∑–∞—Ö–≤–∞—Ç–∞ –±–µ–∑ —Å–µ—Ç–µ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        capture = MockHighPerformanceCapture()
        capture.add_packet_callback(self.packet_callback)
        capture.add_anomaly_callback(self.anomaly_callback)
        
        # –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ (–±–µ–∑ —Å–µ—Ç–µ–≤–æ–≥–æ –∑–∞—Ö–≤–∞—Ç–∞)
        capture.start_processing_only()
        
        try:
            start_time = time.time()
            
            # –ü–æ–¥–∞—á–∞ –ø–∞–∫–µ—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º—É
            for i, packet in enumerate(self.packets):
                packet_data = bytes(packet)
                
                # –ó–∞–ø–∏—Å—å –ø–∞–∫–µ—Ç–∞ –≤ –∫–æ–ª—å—Ü–µ–≤–æ–π –±—É—Ñ–µ—Ä
                success = capture.ring_buffer.write_packet(packet_data)
                if success:
                    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    try:
                        capture.processing_queue.put_nowait(packet_data)
                        capture.stats.packets_captured += 1
                        capture.stats.bytes_captured += len(packet_data)
                        self.packets_sent += 1
                    except:
                        capture.stats.packets_dropped += 1
                        self.packets_failed += 1
                        print(f"‚ö†Ô∏è  –ü–∞–∫–µ—Ç {i+1} –æ—Ç–±—Ä–æ—à–µ–Ω (–æ—á–µ—Ä–µ–¥—å –ø–æ–ª–Ω–∞)")
                else:
                    capture.stats.packets_dropped += 1
                    self.packets_failed += 1
                    print(f"‚ö†Ô∏è  –ü–∞–∫–µ—Ç {i+1} –æ—Ç–±—Ä–æ—à–µ–Ω (–±—É—Ñ–µ—Ä –ø–æ–ª–æ–Ω)")
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏
                if delay > 0:
                    time.sleep(delay)
                
                # –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 100 –ø–∞–∫–µ—Ç–æ–≤
                if (i + 1) % 100 == 0:
                    print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {i+1}/{len(self.packets)} –ø–∞–∫–µ—Ç–æ–≤...")
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            print("\n–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
            time.sleep(3)
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏
            timeout = 10
            while not capture.processing_queue.empty() and timeout > 0:
                time.sleep(0.5)
                timeout -= 0.5
                print(f"–û—á–µ—Ä–µ–¥—å: {capture.processing_queue.qsize()} –ø–∞–∫–µ—Ç–æ–≤")
            
            processing_time = time.time() - start_time
            
            # –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            self.print_buffered_statistics(capture, processing_time)
            
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è  –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        finally:
            capture.stop_capture()
    
    def print_direct_statistics(self, processed: int, failed: int, processing_time: float):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä—è–º–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        total = len(self.packets)
        success_rate = (processed / total) * 100 if total > 0 else 0
        
        print("\n" + "="*60)
        print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–Ø–ú–û–ô –û–ë–†–ê–ë–û–¢–ö–ò")
        print("="*60)
        
        print(f"üìÅ Pcap —Ñ–∞–π–ª: {self.pcap_file.name}")
        print(f"üì¶ –ü–∞–∫–µ—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ: {total}")
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"üöÄ –°–∫–æ—Ä–æ—Å—Ç—å: {total/processing_time:.1f} –ø–∞–∫–µ—Ç–æ–≤/—Å–µ–∫")
        
        print(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
        print(f"  ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed}")
        print(f"  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å: {failed}")
        print(f"  üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
        
        self._print_protocol_stats()
    
    def print_buffered_statistics(self, capture, processing_time: float):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É—Ñ–µ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        stats = capture.get_stats()
        total_packets = len(self.packets)
        processed_packets = len(self.processed_packets)
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–¥—Å—á—ë—Ç –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
        actual_lost = total_packets - processed_packets
        
        print("\n" + "="*60)
        print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–£–§–ï–†–ù–û–ô –û–ë–†–ê–ë–û–¢–ö–ò")
        print("="*60)
        
        print(f"üìÅ Pcap —Ñ–∞–π–ª: {self.pcap_file.name}")
        print(f"üì¶ –ü–∞–∫–µ—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ: {total_packets}")
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"üöÄ –°–∫–æ—Ä–æ—Å—Ç—å: {total_packets/processing_time:.1f} –ø–∞–∫–µ—Ç–æ–≤/—Å–µ–∫")
        
        print("\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞:")
        print(f"  üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Å–∏—Å—Ç–µ–º—É: {self.packets_sent}")
        print(f"  ‚úÖ –ó–∞—Ö–≤–∞—á–µ–Ω–æ —Å–∏—Å—Ç–µ–º–æ–π: {stats.packets_captured}")
        print(f"  ‚öôÔ∏è  –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed_packets}")
        print(f"  ‚ùå –ü–æ—Ç–µ—Ä—è–Ω–æ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {self.packets_failed}")
        print(f"  ‚ùå –ü–æ—Ç–µ—Ä—è–Ω–æ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {stats.packets_dropped}")
        print(f"  üîç –†–ï–ê–õ–¨–ù–´–ï –ø–æ—Ç–µ—Ä–∏: {actual_lost}")
        print(f"  üìä –ë–∞–π—Ç –∑–∞—Ö–≤–∞—á–µ–Ω–æ: {stats.bytes_captured:,}")
        print(f"  üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –±—É—Ñ–µ—Ä–∞: {capture.get_buffer_utilization():.1f}%")
        
        if self.anomalies:
            print(f"\nüö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∞–Ω–æ–º–∞–ª–∏–π: {len(self.anomalies)}")
        
        self._print_protocol_stats()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
        success_rate = (processed_packets / total_packets) * 100
        print(f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏: {success_rate:.1f}%")
        
        if actual_lost > 0:
            print(f"\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ü–æ—Ç–µ—Ä—è–Ω–æ {actual_lost} –ø–∞–∫–µ—Ç–æ–≤!")
            print("   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("   - –û—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–∞–∫–µ—Ç–æ–≤")
            print("   - –ü–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ –±—É—Ñ–µ—Ä–æ–≤")
            print("   - –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã")
        
        if success_rate < 95:
            print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ù–∏–∑–∫–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏!")
        elif success_rate == 100:
            print("üéâ –û–¢–õ–ò–ß–ù–û: –í—Å–µ –ø–∞–∫–µ—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    
    def _print_protocol_stats(self):
        """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞–º"""
        if not self.processed_packets:
            return
            
        protocols = {}
        for pkt_info in self.processed_packets:
            proto = pkt_info['metadata'].protocol
            protocols[proto] = protocols.get(proto, 0) + 1
        
        print("\nüåê –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞–º:")
        protocol_names = {1: 'ICMP', 6: 'TCP', 17: 'UDP'}
        for proto, count in sorted(protocols.items()):
            name = protocol_names.get(proto, f'Protocol-{proto}')
            percentage = (count / len(self.processed_packets)) * 100
            print(f"  {name}: {count} ({percentage:.1f}%)")

class MockHighPerformanceCapture(HighPerformanceCapture):
    """–ú–æ–∫-–≤–µ—Ä—Å–∏—è –∑–∞—Ö–≤–∞—Ç–∞ –±–µ–∑ —Å–µ—Ç–µ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    
    def __init__(self):
        super().__init__(interface=None)
    
    def start_processing_only(self):
        """–ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–µ–∑ —Å–µ—Ç–µ–≤–æ–≥–æ –∑–∞—Ö–≤–∞—Ç–∞"""
        if self.running:
            return
        
        self.running = True
        self.logger.info("–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–∞–∫–µ—Ç–æ–≤ (–±–µ–∑ —Å–µ—Ç–µ–≤–æ–≥–æ –∑–∞—Ö–≤–∞—Ç–∞)")
        
        # –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –ø–æ—Ç–æ–∫–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        for i in range(self.num_processing_threads):
            thread = threading.Thread(
                target=self._processing_worker,
                name=f"PacketProcessor-{i}"
            )
            thread.daemon = True
            thread.start()
            self.processing_threads.append(thread)
        
        self.logger.info(f"–ó–∞–ø—É—â–µ–Ω–æ {self.num_processing_threads} –ø–æ—Ç–æ–∫–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏")

def main():
    parser = argparse.ArgumentParser(
        description="–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ high_performance_capture.py —Å pcap —Ñ–∞–π–ª–∞–º–∏"
    )
    parser.add_argument(
        "pcap_file", 
        help="–ü—É—Ç—å –∫ pcap —Ñ–∞–π–ª—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
    )
    parser.add_argument(
        "--delay", 
        type=float, 
        default=0.001,
        help="–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 0.001)"
    )
    parser.add_argument(
        "--mode", 
        choices=["direct", "buffered", "both"],
        default="both",
        help="–†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: direct (–ø—Ä—è–º–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞), buffered (—á–µ—Ä–µ–∑ –±—É—Ñ–µ—Ä—ã), both (–æ–±–∞)"
    )
    parser.add_argument(
        "--fast", 
        action="store_true",
        help="–ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º –±–µ–∑ –∑–∞–¥–µ—Ä–∂–µ–∫"
    )
    
    args = parser.parse_args()
    
    if args.fast:
        args.delay = 0
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–µ—Ä–∞
        tester = FixedPcapTester(args.pcap_file)
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ pcap —Ñ–∞–π–ª–∞
        tester.load_pcap()
        
        # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if args.mode in ["direct", "both"]:
            print("\n" + "="*60)
            print("üß™ –¢–ï–°–¢ 1: –ü–†–Ø–ú–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê")
            print("="*60)
            tester.simulate_capture_direct(delay=args.delay)
            
            # –°–±—Ä–æ—Å –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞
            if args.mode == "both":
                tester.processed_packets = []
                tester.anomalies = []
        
        if args.mode in ["buffered", "both"]:
            print("\n" + "="*60)
            print("üß™ –¢–ï–°–¢ 2: –ë–£–§–ï–†–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê")
            print("="*60)
            tester.simulate_capture_buffered(delay=args.delay)
        
    except FileNotFoundError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)
    except KeyboardInterrupt:
        print("\nüëã –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    main()